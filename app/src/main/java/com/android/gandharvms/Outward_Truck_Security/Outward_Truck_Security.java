package com.android.gandharvms.Outward_Truck_Security;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Global_Var;
import com.android.gandharvms.InwardCompletedGrid.GridCompleted;
import com.android.gandharvms.Inward_Tanker_Security.Inward_Tanker_Security;
import com.android.gandharvms.LoginWithAPI.Login;
import com.android.gandharvms.LoginWithAPI.LoginMethod;
import com.android.gandharvms.LoginWithAPI.ResponseModel;
import com.android.gandharvms.LoginWithAPI.RetroApiClient;
import com.android.gandharvms.Menu;
import com.android.gandharvms.NotificationAlerts.NotificationCommonfunctioncls;
import com.android.gandharvms.Outward_Tanker_Security.Grid_Outward;
import com.android.gandharvms.Outward_Tanker_Security.Isreportingupdate_Security_model;
import com.android.gandharvms.Outward_Tanker_Security.Outward_RetroApiclient;
import com.android.gandharvms.Outward_Tanker_Security.Outward_Tanker;
import com.android.gandharvms.Outward_Tanker_Security.Outward_Tanker_Security;
import com.android.gandharvms.Outward_Tanker_Security.Request_Model_Outward_Tanker_Security;
import com.android.gandharvms.Outward_Tanker_Security.Response_Outward_Security_Fetching;
import com.android.gandharvms.Outward_Truck;
import com.android.gandharvms.QR_Code.QRGeneratorUtil;
import com.android.gandharvms.R;
import com.android.gandharvms.Util.NavigationUtil;
import com.android.gandharvms.Util.dialogueprogreesbar;
import com.android.gandharvms.VehicleExitResponse;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.messaging.FirebaseMessaging;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import es.dmoral.toasty.Toasty;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.HttpException;
import retrofit2.Response;

public class Outward_Truck_Security extends NotificationCommonfunctioncls {

    public static String Tanker;
    public static String Truck;
    EditText date, intime, serialnumber, vehiclenumber, lr, transporter, place, mobilenumber, remark, reportingremark;
    RadioButton rbvehpermityes, rbLrCopyyes, rbpucyes, rbinsuranceyes, rbvehfitnessyes, rbdriverlicyes, rbrcbookyes,
            rbvehpermitno, rbLrCopyno, rbpucno, rbinsuranceno, rbvehfitnessno, rbdriverlicno, rbrcbookno;
    Button submit;
    FirebaseFirestore dbroot;
    TimePickerDialog tpicker;
    Calendar calendar = Calendar.getInstance();
    DatePickerDialog picker;
    SimpleDateFormat datef = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
    Button saveButton, btcompleted,btnupdate;
    Date currentDate = Calendar.getInstance().getTime();
    CheckBox cbox;
    ImageView btnlogout, btnhome;
    TextView username, empid;
    dialogueprogreesbar dialogHelper = new dialogueprogreesbar();
    private CheckBox isReportingCheckBox;
    private EditText reportingRemarkLayout;
    private final String vehicleType = Global_Var.getInstance().MenuType;
    private final char nextProcess = Global_Var.getInstance().DeptType;
    private final char inOut = Global_Var.getInstance().InOutType;
    private final String EmployeId = Global_Var.getInstance().EmpId;
    private int OutwardId;
    private Outward_Tanker outwardTanker;
    private int autoGeneratedNumber;
    private SharedPreferences sharedPreferences;
    private LoginMethod userDetails;
    private String token;
    CheckBox cbGenerateQR;
    ImageView ivQRCode;
    Button btnPrint;
    private boolean isUpdateMode = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_outward_truck_security);
        userDetails = RetroApiClient.getLoginApi();

        outwardTanker = Outward_RetroApiclient.insertoutwardtankersecurity();
        FirebaseMessaging.getInstance().subscribeToTopic("all");

//        isReportingCheckBox = findViewById(R.id.trsisreporting);
//        reportingRemarkLayout = findViewById(R.id.edtrsreportingremark);
//        saveButton = findViewById(R.id.saveButton);
        btcompleted = findViewById(R.id.outwardtrucksecuritycomp);
        btnupdate = findViewById(R.id.outwardtrucksececupdateclick);

//        reportingRemarkLayout.setVisibility(View.GONE);
//        saveButton.setVisibility(View.GONE);

        sharedPreferences = getSharedPreferences("VehicleManagementPrefs", MODE_PRIVATE);

//        isReportingCheckBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
//            if (isChecked) {
//                // Show the TextInputLayout and Button
//                reportingRemarkLayout.setVisibility(View.VISIBLE);
//                saveButton.setVisibility(View.VISIBLE);
//            } else {
//                // Hide the TextInputLayout and Button
//                reportingRemarkLayout.setVisibility(View.GONE);
//                saveButton.setVisibility(View.GONE);
//            }
//        });

//        saveButton.setOnClickListener(v -> {
//        });

        date = findViewById(R.id.ettrsdate);
        intime = findViewById(R.id.ettrsintime);
        serialnumber = findViewById(R.id.ettrsserialnumber);
        vehiclenumber = findViewById(R.id.ettrsvehicleno);
//        lr = findViewById(R.id.etlr);
        transporter = findViewById(R.id.ettrstranseporter);
        place = findViewById(R.id.ettrsplace);
        mobilenumber = findViewById(R.id.ettrsmobilenumber);
        remark = findViewById(R.id.ettrsremark);
//        cbox = findViewById(R.id.trsisreporting);
//        reportingremark = findViewById(R.id.edtrsreportingremark);

        rbvehpermityes = findViewById(R.id.rbtrsvehpermityes);
        rbLrCopyyes = findViewById(R.id.rb_trsLRCopyYes);
        rbpucyes = findViewById(R.id.rb_trsPUCYes);
        rbinsuranceyes = findViewById(R.id.rb_trsInsuranceYes);
        rbvehfitnessyes = findViewById(R.id.rb_trsvehfitcertYes);
        rbdriverlicyes = findViewById(R.id.rb_trsdriverlicYes);
        rbrcbookyes = findViewById(R.id.rb_trsrcbookYes);

        rbvehpermitno = findViewById(R.id.rbtrsvehpermitno);
        rbLrCopyno = findViewById(R.id.rb_trsLRCopyNo);
        rbpucno = findViewById(R.id.rb_trsPUCNo);
        rbinsuranceno = findViewById(R.id.rb_trsInsuranceNo);
        rbvehfitnessno = findViewById(R.id.rb_trsvehfitcertNo);
        rbdriverlicno = findViewById(R.id.rb_trsdriverlicNo);
        rbrcbookno = findViewById(R.id.rb_trsrcbookNo);
        setupHeader();

        submit = findViewById(R.id.etssubmit);
        dbroot = FirebaseFirestore.getInstance();

        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insert();
            }
        });

        btcompleted.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Outward_Truck_Security.this, OR_Completesec.class));
            }
        });

        btnupdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                updateData();
            }
        });

        String dateFormatPattern = "ddMMyyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatPattern, Locale.getDefault());
        String formattedDate = dateFormat.format(currentDate);
        // AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(formattedDate);
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putInt("autoGeneratedNumber", 1);
            editor.putInt("lastDay", currentDay);
            editor.apply();
        }

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("vehiclenum")) {
                saveButton.setVisibility(View.GONE);
            } else {
                GetMaxSerialNo(vehicleType + formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }

        vehiclenumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                // Not used
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // Optional: Debounce or validation can go here
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (isUpdateMode) {
                    return;
                }

                String vehicleNo = s.toString().trim();
                String selectedvehicle = vehicleType; // Replace with your actual vehicle type retrieval logic
                if(vehicleNo.length()==10)
                {
                    if (!vehicleNo.isEmpty() && !vehicleType.isEmpty()) {
                        verifyVehicleExit(vehicleNo, selectedvehicle);
                    }
                }

            }
        });

        intime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                String time = format.format(calendar.getTime());
                intime.setText(time);
            }
        });
        date.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Outward_Truck_Security.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        // etdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                        date.setText(datef.format(calendar.getTime()).replace("Sept", "Sep"));
                    }
                }, year, month, day);
                picker.show();
            }
        });

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("VehicleNumber")) {
                String action = getIntent().getStringExtra("Action");
                if (action != null && action.equals("Up")) {
                    isUpdateMode = true; // Set flag here
                    FetchVehicleDetailsforUpdate(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'x', 'I');
                } else {
                    FetchVehicleDetails(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'S', 'I');
                    saveButton.setVisibility(View.GONE);
                }
            } else {
                GetMaxSerialNo(vehicleType + formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }
        cbGenerateQR = findViewById(R.id.cbGenerateQR);
        ivQRCode = findViewById(R.id.ivQRCode);
        Button btnPrint = findViewById(R.id.btnPrintQR);
        // call reusable QR function
        QRGeneratorUtil.handleQRCheckbox(this, cbGenerateQR, vehiclenumber, serialnumber, date, intime, ivQRCode, btnPrint);

    }


    private void FetchVehicleDetails(String vehicleNumber, String menuType, char s, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, s, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenumber.setText(out.getVehicleNumber());
                        date.setText(out.getDate());
                        remark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        place.setText(out.getPlace());
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);

                    }
                }else {
                    Toasty.error(Outward_Truck_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    private void FetchVehicleDetailsforUpdate(String vehicleNumber, String menuType, char x, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, x, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenumber.setText(out.getVehicleNumber());
                        date.setText(out.getDate());
                        remark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        place.setText(out.getPlace());
                        transporter.setText(out.getTransportName());
                        mobilenumber.setText(out.getMobileNumber());
                        remark.setText(out.getRemark());
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);
                        btnupdate.setVisibility(View.VISIBLE);
                        submit.setVisibility(View.GONE);


                    }
                }else {
                    Toasty.error(Outward_Truck_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    public void makeNotification(String vehicleNumber, String outTime) {
        Call<List<ResponseModel>> call = userDetails.getUsersListData();
        call.enqueue(new Callback<List<ResponseModel>>() {
            @Override
            public void onResponse(Call<List<ResponseModel>> call, Response<List<ResponseModel>> response) {
                if (response.isSuccessful()) {
                    List<ResponseModel> userList = response.body();
                    if (userList != null) {
                        for (ResponseModel resmodel : userList) {
                            String specificRole = "Logistic";
                            if (specificRole.equals(resmodel.getDepartment())) {
                                token = resmodel.getToken();

                                FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                                        token,
                                        "Outward Truck Security Process Done..!",
                                        "Vehicle Number:-" + vehicleNumber + " has completed Security process at " + outTime,
                                        getApplicationContext(),
                                        Outward_Truck_Security.this
                                );
                                notificationsSender.triggerSendNotification();
                            }
                        }
                    }
                } else {
                    Log.d("API", "Unsuccessful API response");
                }
            }

            @Override
            public void onFailure(Call<List<ResponseModel>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Truck_Security.this, "failed..!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    public void Notificationforall(String vehicleNumber) {
        FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                "/topics/all",
                "Vehicle Entry in Factory for Outward Truck Process",
                "This Vehicle:-" + vehicleNumber + " Entry in Factory for Outward Truck Process",
                getApplicationContext(),
                Outward_Truck_Security.this
        );
        notificationsSender.triggerSendNotification();
    }

    public void insert() {
        String etintime = intime.getText().toString().trim();
        String trdate = date.getText().toString().trim();
        String etserialnum = serialnumber.getText().toString().trim();
        String etvehiclnum = vehiclenumber.getText().toString().trim();
        String ettransname = transporter.getText().toString().trim();
        String etplace = place.getText().toString().trim();
        String etmobilenum = mobilenumber.getText().toString().trim();
        String trremark = remark.getText().toString().trim();
        String outTime = getCurrentTime();

        String vehpermitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String vehlrcopy = rbLrCopyyes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = rbvehfitnessyes.isChecked() ? "Yes" : "No";
        String drlicselection = rbdriverlicyes.isChecked() ? "Yes" : "No";
        String rcselection = rbrcbookyes.isChecked() ? "Yes" : "No";

        if (etintime.isEmpty() || trdate.isEmpty() || etserialnum.isEmpty() || etvehiclnum.isEmpty() || ettransname.isEmpty() ||
                etplace.isEmpty() || etmobilenum.isEmpty() || trremark.isEmpty()) {
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        } else {
            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, etintime,
                    outTime, 0, etplace, vehpermitselection, pucselection, insuranceselection, vehfitnesselection, drlicselection, rcselection, "", "",
                    "", "", trremark, vehlrcopy, "", "", "", "", outTime, EmployeId, false,
                    "", 'S', etserialnum, etvehiclnum, ettransname, etmobilenum, "", "", trdate
                    , "", "", "", 0, "", 0, "",
                    'G', inOut, vehicleType, etintime, "");
            dialogHelper.showConfirmationDialog(this, () -> {
                dialogHelper.showProgressDialog(this); // Show progress when confirmed

                Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);

                call.enqueue(new Callback<Boolean>() {
                    @Override
                    public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                        if (response.isSuccessful() && response.body() != null && response.body()) {
                            dialogHelper.hideProgressDialog(); // Hide after response
                            Notificationforall(etvehiclnum);
                            makeNotification(etvehiclnum, outTime);
                            Toasty.success(Outward_Truck_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                            NavigationUtil.navigateAndClear(Outward_Truck_Security.this, Grid_Outward.class);
                        }
                    }

                    @Override
                    public void onFailure(Call<Boolean> call, Throwable t) {
                        dialogHelper.hideProgressDialog(); // Hide after response
                        Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                        if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                            Response<?> response = ((HttpException) t).response();
                            if (response != null) {
                                Log.e("Retrofit", "Error Response Code: " + response.code());
                                try {
                                    Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                        Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();

                    }
                });
            });
        }
    }

    public void GetMaxSerialNo(String formattedDate) {
        /*String serialNoPreFix = "GA" + formattedDate;*/
        Call<String> call = outwardTanker.getmaxserialnumberoutward(formattedDate);
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                if (response.isSuccessful()) {
                    String maxSerialNumber = response.body();
                    autoGeneratedNumber = Integer.parseInt(maxSerialNumber.substring(10, 13)) + 1;
                    @SuppressLint("DefaultLocale") String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
                    String serialNumber = formattedDate + autoGeneratedNumberString;
                    serialnumber.setText(serialNumber);
                    serialnumber.setEnabled(true);
                } else {
                    // Handle the error
                    String serialNumber = formattedDate + "001";
                    serialnumber.setText(serialNumber);
                }
            }

            @Override
            public void onFailure(Call<String> call, Throwable t) {
                String serialNumber = formattedDate + "001";
                serialnumber.setText(serialNumber);
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();
                // Handle the failure

            }
        });
    }

    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }

    private void updateData() {
        String serial = serialnumber.getText().toString().trim();
        String uvehicle = vehiclenumber.getText().toString().trim();
        String udate = date.getText().toString().trim();
        String uintime = intime.getText().toString().trim();
        String utransporter = transporter.getText().toString().trim();
        String uplace = place.getText().toString().trim();
        String umobile = mobilenumber.getText().toString().trim();
        String uremark = remark.getText().toString().trim();
        String outTime = getCurrentTime();

        String vehpermitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String vehlrcopy = rbLrCopyyes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = rbvehfitnessyes.isChecked() ? "Yes" : "No";
        String drlicselection = rbdriverlicyes.isChecked() ? "Yes" : "No";
        String rcselection = rbrcbookyes.isChecked() ? "Yes" : "No";

        if (serial.isEmpty() || uvehicle.isEmpty() || udate.isEmpty() || uintime.isEmpty() || utransporter.isEmpty() || uplace.isEmpty() ||
                umobile.isEmpty() || uremark.isEmpty()) {
            Toasty.warning(this, "All fields must be filled", Toast.LENGTH_SHORT, true).show();
        } else {
            Isreportingupdate_Security_model isreportingupdateSecurityModel = new Isreportingupdate_Security_model(OutwardId, uintime, outTime,
                    0, uplace, vehpermitselection, pucselection, insuranceselection, vehfitnesselection, drlicselection, rcselection, "",
                    "", "", "", uremark, vehlrcopy, EmployeId, "", "", "",
                    "", "", 'S', serial, uvehicle, utransporter, umobile, "", "", "", "", "", 0,
                    "", 0, "", 'L', inOut, vehicleType, uintime, "");

            Call<Boolean> call = outwardTanker.updateoutwardsecurity(isreportingupdateSecurityModel);
            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() && response.body()) {
                        makeNotification(uvehicle, outTime);
                        Toasty.success(Outward_Truck_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(Outward_Truck_Security.this, Outward_Truck.class));
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {

                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();
                }
            });
        }
    }

    private void verifyVehicleExit(String vehicleNo, String vehicleType) {
        Call<VehicleExitResponse> call = outwardTanker.checkvehicleexits(vehicleNo,vehicleType);
        call.enqueue(new Callback<VehicleExitResponse>() {
            @Override
            public void onResponse(Call<VehicleExitResponse> call, Response<VehicleExitResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    int status = response.body().getStatus();
                    if (status == 1) {
                        //Toasty.success(Outward_Tanker_Security.this, "Vehicle Does Not In Factory", Toast.LENGTH_SHORT).show();
                    } else {
                        Toasty.warning(Outward_Truck_Security.this, "Vehicle already exists in factory and has not completed the process flow.", Toast.LENGTH_LONG).show();
                        vehiclenumber.setText("");
                    }
                } else {
                    Log.e("API_ERROR", "Unsuccessful response");
                }
            }

            @Override
            public void onFailure(Call<VehicleExitResponse> call, Throwable t) {
                Log.e("API_ERROR", "Failure: " + t.getMessage());
            }
        });
    }

    public void outtrucksecuritypending(View view) {
        Intent intent = new Intent(this, Grid_Outward.class);
        startActivity(intent);
    }

    public void outwardtrucksecurityc(View view) {
        Intent intent = new Intent(this, OR_Completesec.class);
        startActivity(intent);
    }
}