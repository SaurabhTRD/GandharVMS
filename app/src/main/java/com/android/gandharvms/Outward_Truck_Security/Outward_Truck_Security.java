package com.android.gandharvms.Outward_Truck_Security;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Global_Var;
import com.android.gandharvms.InwardCompletedGrid.GridCompleted;
import com.android.gandharvms.Inward_Tanker_Security.Inward_Tanker_Security;
import com.android.gandharvms.LoginWithAPI.Login;
import com.android.gandharvms.LoginWithAPI.LoginMethod;
import com.android.gandharvms.LoginWithAPI.ResponseModel;
import com.android.gandharvms.LoginWithAPI.RetroApiClient;
import com.android.gandharvms.Menu;
import com.android.gandharvms.NotificationAlerts.NotificationCommonfunctioncls;
import com.android.gandharvms.Outward_Tanker_Security.Grid_Outward;
import com.android.gandharvms.Outward_Tanker_Security.Isreportingupdate_Security_model;
import com.android.gandharvms.Outward_Tanker_Security.Outward_RetroApiclient;
import com.android.gandharvms.Outward_Tanker_Security.Outward_Tanker;
import com.android.gandharvms.Outward_Tanker_Security.Outward_Tanker_Security;
import com.android.gandharvms.Outward_Tanker_Security.Request_Model_Outward_Tanker_Security;
import com.android.gandharvms.Outward_Tanker_Security.Response_Outward_Security_Fetching;
import com.android.gandharvms.Outward_Truck;
import com.android.gandharvms.R;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.messaging.FirebaseMessaging;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import es.dmoral.toasty.Toasty;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.HttpException;
import retrofit2.Response;

public class Outward_Truck_Security extends NotificationCommonfunctioncls {

    EditText date,intime,serialnumber,vehiclenumber,lr,transporter,place,mobilenumber,remark, reportingremark;
    RadioButton rbvehpermityes, rbLrCopyyes, rbpucyes, rbinsuranceyes, rbvehfitnessyes, rbdriverlicyes, rbrcbookyes,
                rbvehpermitno, rbLrCopyno, rbpucno, rbinsuranceno, rbvehfitnessno, rbdriverlicno, rbrcbookno;
    Button submit;
    FirebaseFirestore dbroot;
    TimePickerDialog tpicker;
    Calendar calendar = Calendar.getInstance();
    private CheckBox isReportingCheckBox;
    DatePickerDialog picker;
    SimpleDateFormat datef = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");

    private EditText reportingRemarkLayout;
    Button saveButton,btcompleted;

    private String vehicleType = Global_Var.getInstance().MenuType;
    private char nextProcess = Global_Var.getInstance().DeptType;
    private char inOut = Global_Var.getInstance().InOutType;
    private String EmployeId = Global_Var.getInstance().EmpId;
    private int OutwardId;
    private Outward_Tanker outwardTanker;
    Date currentDate = Calendar.getInstance().getTime();
    private int autoGeneratedNumber;
    private SharedPreferences sharedPreferences;
    CheckBox cbox;
    private LoginMethod userDetails;
    private String token;

    ImageView btnlogout,btnhome;
    TextView username,empid;

    public static String Tanker;
    public static String Truck;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_outward_truck_security);
        userDetails = RetroApiClient.getLoginApi();

        outwardTanker = Outward_RetroApiclient.insertoutwardtankersecurity();
        FirebaseMessaging.getInstance().subscribeToTopic("all");

//        isReportingCheckBox = findViewById(R.id.trsisreporting);
//        reportingRemarkLayout = findViewById(R.id.edtrsreportingremark);
//        saveButton = findViewById(R.id.saveButton);
        btcompleted = findViewById(R.id.outwardtrucksecuritycomp);

//        reportingRemarkLayout.setVisibility(View.GONE);
//        saveButton.setVisibility(View.GONE);

        sharedPreferences = getSharedPreferences("VehicleManagementPrefs", MODE_PRIVATE);

//        isReportingCheckBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
//            if (isChecked) {
//                // Show the TextInputLayout and Button
//                reportingRemarkLayout.setVisibility(View.VISIBLE);
//                saveButton.setVisibility(View.VISIBLE);
//            } else {
//                // Hide the TextInputLayout and Button
//                reportingRemarkLayout.setVisibility(View.GONE);
//                saveButton.setVisibility(View.GONE);
//            }
//        });

//        saveButton.setOnClickListener(v -> {
//        });

        date=findViewById(R.id.ettrsdate);
        intime = findViewById(R.id.ettrsintime);
        serialnumber = findViewById(R.id.ettrsserialnumber);
        vehiclenumber = findViewById(R.id.ettrsvehicleno);
//        lr = findViewById(R.id.etlr);
        transporter= findViewById(R.id.ettrstranseporter);
        place = findViewById(R.id.ettrsplace);
        mobilenumber = findViewById(R.id.ettrsmobilenumber);
        remark=findViewById(R.id.ettrsremark);
//        cbox = findViewById(R.id.trsisreporting);
//        reportingremark = findViewById(R.id.edtrsreportingremark);

        rbvehpermityes=findViewById(R.id.rbtrsvehpermityes);
        rbLrCopyyes=findViewById(R.id.rb_trsLRCopyYes);
        rbpucyes=findViewById(R.id.rb_trsPUCYes);
        rbinsuranceyes=findViewById(R.id.rb_trsInsuranceYes);
        rbvehfitnessyes=findViewById(R.id.rb_trsvehfitcertYes);
        rbdriverlicyes=findViewById(R.id.rb_trsdriverlicYes);
        rbrcbookyes=findViewById(R.id.rb_trsrcbookYes);

        rbvehpermitno=findViewById(R.id.rbtrsvehpermitno);
        rbLrCopyno=findViewById(R.id.rb_trsLRCopyNo);
        rbpucno=findViewById(R.id.rb_trsPUCNo);
        rbinsuranceno=findViewById(R.id.rb_trsInsuranceNo);
        rbvehfitnessno=findViewById(R.id.rb_trsvehfitcertNo);
        rbdriverlicno=findViewById(R.id.rb_trsdriverlicNo);
        rbrcbookno=findViewById(R.id.rb_trsrcbookNo);

        /*btnhome = findViewById(R.id.btn_homeButton);
        btnlogout=findViewById(R.id.btn_logoutButton);
        username=findViewById(R.id.tv_username);
        empid=findViewById(R.id.tv_employeeId);

        String userName=Global_Var.getInstance().Name;
        String empId=Global_Var.getInstance().EmpId;

        username.setText(userName);
        empid.setText(empId);
        btnlogout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent(Outward_Truck_Security.this, Login.class));
            }
        });
        btnhome.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent(Outward_Truck_Security.this, Menu.class));
            }
        });*/

        setupHeader();

        submit = findViewById(R.id.etssubmit);
        dbroot= FirebaseFirestore.getInstance();

        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                insert();
//                isReportingCheckBox = findViewById(R.id.trsisreporting);
//                if (isReportingCheckBox.isChecked()) {
//                    updateData();
//                } else {
//                    insert();
//                }

            }
        });
        btcompleted.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Outward_Truck_Security.this, OR_Completesec.class));
            }
        });

//        saveButton = findViewById(R.id.saveButton);
//        saveButton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                insertreporting();
//            }
//        });

        String dateFormatPattern = "ddMMyyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatPattern, Locale.getDefault());
        String formattedDate = dateFormat.format(currentDate);
        // AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(formattedDate);
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putInt("autoGeneratedNumber", 1);
            editor.putInt("lastDay", currentDay);
            editor.apply();
        }

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("vehiclenum")) {
//                FetchVehicleDetails(getIntent().getStringExtra("vehiclenum"), Global_Var.getInstance().MenuType, nextProcess, inOut);
                saveButton.setVisibility(View.GONE);
            }else {
                GetMaxSerialNo(vehicleType +formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }

        intime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                String time =  format.format(calendar.getTime());
                intime.setText(time);
            }
        });
        date.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Outward_Truck_Security.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        // etdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                        date.setText(datef.format(calendar.getTime()).replace("Sept","Sep"));
                    }
                }, year, month, day);
                picker.show();
            }
        });
//        vehiclenumber.setOnFocusChangeListener(new View.OnFocusChangeListener() {
//            @Override
//            public void onFocusChange(View v, boolean hasFocus) {
//                if (!hasFocus) {
//                    FetchVehicleDetails(vehiclenumber.getText().toString().trim(), vehicleType, nextProcess, inOut);
//                }
//            }
//        });
//
//        if (getIntent().hasExtra("vehiclenum")) {
//            FetchVehicleDetails(getIntent().getStringExtra("vehiclenum"), Global_Var.getInstance().MenuType, nextProcess, inOut);
//        }

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("VehicleNumber")) {
                String action = getIntent().getStringExtra("Action");
                if (action != null && action.equals("Up")) {
                    FetchVehicleDetailsforUpdate(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'x', 'I');
                } else {
                    FetchVehicleDetails(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'S', 'I');
                    saveButton.setVisibility(View.GONE);
//                    button1.setVisibility(View.GONE);
                }
//                btnadd.setVisibility(View.GONE);
            } else {
                GetMaxSerialNo(vehicleType + formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }
    }


    private void FetchVehicleDetails(String vehicleNumber, String menuType, char s, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, s, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenumber.setText(out.getVehicleNumber());
                        date.setText(out.getDate());
                        remark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        place.setText(out.getPlace());
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);

                    }
                }else {
                    Toasty.error(Outward_Truck_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    private void FetchVehicleDetailsforUpdate(String vehicleNumber, String menuType, char x, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, x, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenumber.setText(out.getVehicleNumber());
                        date.setText(out.getDate());
                        remark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        place.setText(out.getPlace());
                        transporter.setText(out.getTransportName());
                        mobilenumber.setText(out.getMobileNumber());
                        remark.setText(out.getRemark());
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);
                       // updatebtn.setVisibility(View.VISIBLE);
                        submit.setVisibility(View.GONE);


                    }
                }else {
                    Toasty.error(Outward_Truck_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    public void makeNotification(String vehicleNumber, String outTime) {
        Call<List<ResponseModel>> call = userDetails.getUsersListData();
        call.enqueue(new Callback<List<ResponseModel>>() {
            @Override
            public void onResponse(Call<List<ResponseModel>> call, Response<List<ResponseModel>> response) {
                if (response.isSuccessful()){
                    List<ResponseModel> userList = response.body();
                    if (userList != null){
                        for (ResponseModel resmodel : userList){
                            String specificRole = "Logistic";
                            if (specificRole.equals(resmodel.getDepartment())) {
                                token = resmodel.getToken();

                                FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                                        token,
                                        "Outward Truck Security Process Done..!",
                                        "Vehicle Number:-" + vehicleNumber + " has completed Security process at " + outTime,
                                        getApplicationContext(),
                                        Outward_Truck_Security.this
                                );
                                notificationsSender.triggerSendNotification();
                            }
                        }
                    }
                }
                else {
                    Log.d("API", "Unsuccessful API response");
                }
            }

            @Override
            public void onFailure(Call<List<ResponseModel>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Truck_Security.this, "failed..!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    public void Notificationforall(String vehicleNumber) {
        FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                "/topics/all",
                "Vehicle Entry in Factory for Outward Truck Process",
                "This Vehicle:-" + vehicleNumber + " Entry in Factory for Outward Truck Process",
                getApplicationContext(),
                Outward_Truck_Security.this
        );
        notificationsSender.triggerSendNotification();
    }

//    private void insertreporting() {
//        String serial = serialnumber.getText().toString().trim();
//        String vehicle = vehiclenumber.getText().toString().trim();
//        String cudate = date.getText().toString().trim();
//        String edremark = "";
//        String outTime = getCurrentTime();
//        Boolean isreporting = false;
//        if (cbox.isChecked()) {
//            edremark = reportingremark.getText().toString().trim();
//            isreporting = true;
//        }
//        if (vehicle.isEmpty() || cudate.isEmpty()) {
//            Toasty.warning(this, "All fields must be filled", Toast.LENGTH_SHORT, true).show();
//        } else {
//            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, "", outTime,
//                    '0', "", "", "", "", "", "", "", "", "",
//                    "", "", "", "", "", "", "", "", "", EmployeId,
//                    isreporting, edremark, 'S', serial, vehicle, "", "", "","",
//                    cudate, "", "", "", '0', "", '0', "", 'S', inOut,
//                    vehicleType, "", "");
//            Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);
//            call.enqueue(new Callback<Boolean>() {
//                @Override
//                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
//                    if (response.isSuccessful() && response.body() != null && response.body() == true) {
//                        makeNotification(vehicle,outTime);
//                        Toasty.success(Outward_Truck_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
//                        startActivity(new Intent(Outward_Truck_Security.this, Outward_Truck.class));
//                        finish();
//                    }
//                }
//
//                @Override
//                public void onFailure(Call<Boolean> call, Throwable t) {
//
//                    Log.e("Retrofit", "Failure: " + t.getMessage());
//// Check if there's a response body in case of an HTTP error
//                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
//                        Response<?> response = ((HttpException) t).response();
//                        if (response != null) {
//                            Log.e("Retrofit", "Error Response Code: " + response.code());
//                            try {
//                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
//                            } catch (IOException e) {
//                                e.printStackTrace();
//                            }
//                        }
//                    }
//                    Toast.makeText(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();
//                }
//            });
//
//        }
//    }
//    private void FetchVehicleDetails(@NonNull String VehicleNo, String vehicltype, char DeptType, char InOutType) {
//
//        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(VehicleNo, vehicltype, DeptType, InOutType);
//        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
//            @Override
//            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
//                if (response.isSuccessful()&& response.body()!= null ) {
//                    if (response.body().size() > 0){
//                        List<Response_Outward_Security_Fetching> data = response.body();
//                        Response_Outward_Security_Fetching obj = data.get(0);
//                        OutwardId = obj.getOutwardId();
//                        serialnumber.setText(obj.getSerialNumber());
//                        serialnumber.setEnabled(false);
//                        vehiclenumber.setText(obj.getVehicleNumber());
//                        vehiclenumber.setEnabled(false);
//                        date.setText(obj.getDate());
//                        date.setEnabled(false);
//                        cbox.setChecked(true);
//                        cbox.setEnabled(false);
//                        saveButton.setVisibility(View.GONE);
//                        reportingremark.setEnabled(false);
//                        reportingremark.setVisibility(View.GONE);
//                        intime.callOnClick();
//                    }
//                } else {
//                    Toasty.error(Outward_Truck_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
//                }
//            }
//
//            @Override
//            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
//
//                Log.e("Retrofit", "Failure: " + t.getMessage());
//// Check if there's a response body in case of an HTTP error
//                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
//                    Response<?> response = ((HttpException) t).response();
//                    if (response != null) {
//                        Log.e("Retrofit", "Error Response Code: " + response.code());
//                        try {
//                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
//                        } catch (IOException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//            }
//        });
//    }

    public void insert() {
        String etintime = intime.getText().toString().trim();
        String trdate = date.getText().toString().trim();
        String etserialnum = serialnumber.getText().toString().trim();
        String etvehiclnum = vehiclenumber.getText().toString().trim();
        String ettransname = transporter.getText().toString().trim();
        String etplace = place.getText().toString().trim();
        String etmobilenum = mobilenumber.getText().toString().trim();
        String trremark = remark.getText().toString().trim();
        String outTime = getCurrentTime();

        String vehpermitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String vehlrcopy = rbLrCopyyes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = rbvehfitnessyes.isChecked() ? "Yes" : "No";
        String drlicselection = rbdriverlicyes.isChecked() ? "Yes" : "No";
        String rcselection = rbrcbookyes.isChecked() ? "Yes" : "No";

        if (etintime.isEmpty() ||trdate.isEmpty()|| etserialnum.isEmpty() || etvehiclnum.isEmpty() || ettransname.isEmpty() ||
                etplace.isEmpty() || etmobilenum.isEmpty()||trremark.isEmpty()) {
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        } else {
            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, etintime,
                    outTime, 0, etplace, vehpermitselection, pucselection, insuranceselection, vehfitnesselection, drlicselection, rcselection, "", "",
                    "", "", trremark, vehlrcopy, "", "", "", "", outTime, EmployeId, false,
                    "", 'S', etserialnum, etvehiclnum, ettransname, etmobilenum, "", "",trdate
                    , "", "", "", 0, "", 0, "",
                    'G', inOut, vehicleType, etintime, "");


            Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);

            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() != null && response.body() == true) {
                        Notificationforall(etvehiclnum);
                        makeNotification(etvehiclnum, outTime);
                        Toasty.success(Outward_Truck_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(Outward_Truck_Security.this, Outward_Truck.class));
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {
                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();

                }
            });
        }
    }
    public void GetMaxSerialNo(String formattedDate) {
        /*String serialNoPreFix = "GA" + formattedDate;*/
        Call<String> call = outwardTanker.getmaxserialnumberoutward(formattedDate);
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                if (response.isSuccessful()) {
                    String maxSerialNumber = response.body();
                    autoGeneratedNumber = Integer.parseInt(maxSerialNumber.substring(10, 13)) + 1;
                    @SuppressLint("DefaultLocale") String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
                    String serialNumber =  formattedDate + autoGeneratedNumberString;
                    serialnumber.setText(serialNumber);
                    serialnumber.setEnabled(true);
                } else {
                    // Handle the error
                    String serialNumber =  formattedDate + "001";
                    serialnumber.setText(serialNumber);
                }
            }

            @Override
            public void onFailure(Call<String> call, Throwable t) {
                String serialNumber =  formattedDate + "001";
                serialnumber.setText(serialNumber);
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();
                // Handle the failure

            }
        });
    }
    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }

    private void updateData() {
        String serial = serialnumber.getText().toString().trim();
        String uvehicle = vehiclenumber.getText().toString().trim();
        String udate = date.getText().toString().trim();
        String uintime = intime.getText().toString().trim();
        String utransporter = transporter.getText().toString().trim();
        String uplace = place.getText().toString().trim();
        String umobile = mobilenumber.getText().toString().trim();
        String uremark = remark.getText().toString().trim();
        String outTime = getCurrentTime();

        String vehpermitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String vehlrcopy = rbLrCopyyes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = rbvehfitnessyes.isChecked() ? "Yes" : "No";
        String drlicselection = rbdriverlicyes.isChecked() ? "Yes" : "No";
        String rcselection = rbrcbookyes.isChecked() ? "Yes" : "No";

        if (serial.isEmpty()||uvehicle.isEmpty()||udate.isEmpty()||uintime.isEmpty()||utransporter.isEmpty()||uplace.isEmpty()||
                umobile.isEmpty()||uremark.isEmpty()){
            Toasty.warning(this,"All fields must be filled",Toast.LENGTH_SHORT,true).show();
        }else {
            Isreportingupdate_Security_model isreportingupdateSecurityModel = new Isreportingupdate_Security_model(OutwardId,uintime,outTime,
                    0,uplace,vehpermitselection,pucselection,insuranceselection,vehfitnesselection,drlicselection,rcselection,"",
                    "","","",uremark,vehlrcopy,EmployeId,"","","",
                    "","",'S',serial,uvehicle,utransporter,umobile,"","","","","",0,
                    "",0,"",'L',inOut,vehicleType,uintime,"");

            Call<Boolean> call = outwardTanker.updateoutwardsecurity(isreportingupdateSecurityModel);
            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() && response.body() == true){
                        makeNotification(uvehicle, outTime);
                        Toasty.success(Outward_Truck_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(Outward_Truck_Security.this, Outward_Truck.class));
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {

                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toasty.error(Outward_Truck_Security.this, "failed", Toast.LENGTH_SHORT).show();
                }
            });
        }
    }
    public void  outtrucksecuritypending(View view){
        Intent intent = new Intent(this, Grid_Outward.class);
        startActivity(intent);
    }
    public void outwardtrucksecurityc(View view){
        Intent intent = new Intent(this,OR_Completesec.class);
        startActivity(intent);
    }
}