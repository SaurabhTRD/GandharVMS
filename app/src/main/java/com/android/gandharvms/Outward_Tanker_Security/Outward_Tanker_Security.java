package com.android.gandharvms.Outward_Tanker_Security;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Global_Var;
import com.android.gandharvms.InwardCompletedGrid.GridCompleted;
import com.android.gandharvms.Inward_Tanker_Security.Inward_Tanker_Security;
import com.android.gandharvms.Inward_Truck;
import com.android.gandharvms.LoginWithAPI.Login;
import com.android.gandharvms.LoginWithAPI.LoginMethod;
import com.android.gandharvms.LoginWithAPI.ResponseModel;
import com.android.gandharvms.LoginWithAPI.RetroApiClient;
import com.android.gandharvms.Menu;
import com.android.gandharvms.NotificationAlerts.NotificationCommonfunctioncls;
import com.android.gandharvms.QR_Code.QRGeneratorUtil;
import com.android.gandharvms.R;
import com.android.gandharvms.Util.NavigationUtil;
import com.android.gandharvms.Util.dialogueprogreesbar;
import com.android.gandharvms.VehicleExitResponse;
import com.android.gandharvms.outward_Tanker_Lab_forms.Outward_Tanker_Laboratory;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.messaging.FirebaseMessaging;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import es.dmoral.toasty.Toasty;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.HttpException;
import retrofit2.Response;

public class Outward_Tanker_Security extends NotificationCommonfunctioncls {


    public static String Tanker;
    public static String Truck;
    public Outward_Tanker getmaxserialno;
    EditText intime, serialnumber, kl, vehiclenum, transname, place, mobilenum, edremark, eddate, capacityvehicle, reportingremark;
    Button submit;
    FirebaseFirestore dbroot;
    TimePickerDialog tpicker;
    Calendar calendar = Calendar.getInstance();
    Button saveButton, completed,updatebtn;
    RadioButton rbvehpermityes, rbvehpermitno, rbpucyes, rbpucno, rbinsuranceyes, rbinsuranceno, vehfitnessyes, vehfitnessno, licye, licno, rcyes, rcno;
    DatePickerDialog picker;
    SimpleDateFormat datef = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
    Date currentDate = Calendar.getInstance().getTime();
    CheckBox cbox;
    ImageView btnlogout, btnhome;
    TextView username, empid;
    dialogueprogreesbar dialogHelper = new dialogueprogreesbar();
    private CheckBox isReportingCheckBox;
    private EditText reportingRemarkLayout;
    private final String vehicleType = Global_Var.getInstance().MenuType;
    private final char nextProcess = Global_Var.getInstance().DeptType;
    private final char inOut = Global_Var.getInstance().InOutType;
    private final String EmployeName = Global_Var.getInstance().Name;
    private final String EmployeId = Global_Var.getInstance().EmpId;
    private int OutwardId;
    private Outward_Tanker outwardTanker;
    private int autoGeneratedNumber;
    private SharedPreferences sharedPreferences;
    private String token;
    private LoginMethod userDetails;
    private int ukl;
    CheckBox cbGenerateQR;
    ImageView ivQRCode;
    Button btnPrint;
    private boolean isUpdateMode = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_outward_tanker_security);
        getmaxserialno = Outward_RetroApiclient.insertoutwardtankersecurity();
        outwardTanker = Outward_RetroApiclient.insertoutwardtankersecurity();
        userDetails = RetroApiClient.getLoginApi();

        FirebaseMessaging.getInstance().subscribeToTopic("all");

        completed = findViewById(R.id.otsecuritycompleted);
        updatebtn = findViewById(R.id.outwardsececupdateclick);
        //        listdata button
        completed.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Outward_Tanker_Security.this, OT_Complete_sec.class));
            }
        });

        intime = findViewById(R.id.etintime);
        eddate = findViewById(R.id.etdate);
        serialnumber = findViewById(R.id.etserialnumber);
        kl = findViewById(R.id.etkl);
        vehiclenum = findViewById(R.id.etvehicleno);

        transname = findViewById(R.id.ettranseportname);
        place = findViewById(R.id.etplace);
        mobilenum = findViewById(R.id.etmobilenumber);
        edremark = findViewById(R.id.etremark);
//        capacityvehicle = findViewById(R.id.etcapacityofvehicle);

        rbvehpermityes = findViewById(R.id.vehiclepermityes);
        rbvehpermitno = findViewById(R.id.vehiclepermitno);
        rbpucyes = findViewById(R.id.pucyes);
        rbpucno = findViewById(R.id.pucno);
        rbinsuranceyes = findViewById(R.id.insuranceyes);
        rbinsuranceno = findViewById(R.id.insuranceno);
        vehfitnessyes = findViewById(R.id.vehfityes);
        vehfitnessno = findViewById(R.id.vehfitno);
        licye = findViewById(R.id.drilicyes);
        licno = findViewById(R.id.drilicno);
        rcyes = findViewById(R.id.rcbook_yes);
        rcno = findViewById(R.id.rcbook_no);
        sharedPreferences = getSharedPreferences("VehicleManagementPrefs", MODE_PRIVATE);
        submit = findViewById(R.id.etssubmit);
        dbroot = FirebaseFirestore.getInstance();

        setupHeader();
        String dateFormatPattern = "ddMMyyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatPattern, Locale.getDefault());
        String formattedDate = dateFormat.format(currentDate);
        // AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(formattedDate);
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putInt("autoGeneratedNumber", 1);
            editor.putInt("lastDay", currentDay);
            editor.apply();
        }

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("vehiclenum")) {
            } else {
                GetMaxSerialNo(vehicleType + formattedDate);
            }
        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }


        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                insert();
//                isReportingCheckBox = findViewById(R.id.isreporting);
//                if (isReportingCheckBox.isChecked()) {
////                    updateData();
//                } else {
//                    insert();
//                }

            }
        });

        updatebtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                updateData();
            }
        });
//        saveButton = findViewById(R.id.saveButton);
//        saveButton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                insertreporting();
//            }
//        });


        intime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                String time = format.format(calendar.getTime());
                intime.setText(time);
            }
        });

        eddate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Outward_Tanker_Security.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        // etdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                        eddate.setText(datef.format(calendar.getTime()).replace("Sept", "Sep"));
                    }
                }, year, month, day);
                picker.show();
            }
        });


        vehiclenum.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    FetchVehicleDetail(vehiclenum.getText().toString().trim(), vehicleType, nextProcess, inOut);
                }
            }
        });

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("VehicleNumber")) {
                String action = getIntent().getStringExtra("Action");
                if (action != null && action.equals("Up")) {
                    isUpdateMode = true; // Set flag here
                    FetchVehicleDetailsforUpdate(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'x', 'I');
                } else {
                    FetchVehicleDetails(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'S', 'I');
                    saveButton.setVisibility(View.GONE);
//                    button1.setVisibility(View.GONE);
                }
//                btnadd.setVisibility(View.GONE);
            } else {
                GetMaxSerialNo(vehicleType + formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }

        vehiclenum.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                // Not used
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // Optional: Debounce or validation can go here
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (isUpdateMode) {
                    return;
                }
                String vehicleNo = s.toString().trim();
                String selectedvehicle = vehicleType; // Replace with your actual vehicle type retrieval logic
                if(vehicleNo.length()==10)
                {
                    if (!vehicleNo.isEmpty() && !vehicleType.isEmpty()) {
                        verifyVehicleExit(vehicleNo, selectedvehicle);
                    }
                }

            }
        });

        cbGenerateQR = findViewById(R.id.cbGenerateQR);
        ivQRCode = findViewById(R.id.ivQRCode);
        Button btnPrint = findViewById(R.id.btnPrintQR);

        // call reusable QR function
        QRGeneratorUtil.handleQRCheckbox(this, cbGenerateQR, vehiclenum, serialnumber, eddate, intime, ivQRCode, btnPrint);

    }

    public void makeNotification(String vehicleNumber, String outTime) {
        Call<List<ResponseModel>> call = userDetails.getUsersListData();
        call.enqueue(new Callback<List<ResponseModel>>() {
            @Override
            public void onResponse(Call<List<ResponseModel>> call, Response<List<ResponseModel>> response) {
                if (response.isSuccessful()) {
                    List<ResponseModel> userList = response.body();
                    if (userList != null) {
                        for (ResponseModel resmodel : userList) {
                            String specificRole = "Billing";
                            if (specificRole.equals(resmodel.getDepartment())) {
                                token = resmodel.getToken();

                                FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                                        token,
                                        "Outward Tanker Security Process Done..!",
                                        "Vehicle Number:-" + vehicleNumber + " has completed Security process at " + outTime,
                                        getApplicationContext(),
                                        Outward_Tanker_Security.this
                                );
                                notificationsSender.triggerSendNotification();
                            }
                        }
                    }
                } else {
                    Log.d("API", "Unsuccessful API response");
                }
            }

            @Override
            public void onFailure(Call<List<ResponseModel>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Tanker_Security.this, "failed..!", Toast.LENGTH_SHORT).show();
            }
        });
    }

    public void Notificationforall(String vehicleNumber) {
        FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                "/topics/all",
                "Vehicle Entry in Factory for Outward Tanker Process",
                "This Vehicle:-" + vehicleNumber + " Entry in Factory for Outward Tanker Process",
                getApplicationContext(),
                Outward_Tanker_Security.this
        );
        notificationsSender.triggerSendNotification();
    }

    public void productionnotification(String vehicleNumber, String outTime) {
        Call<List<ResponseModel>> call = userDetails.getUsersListData();
        call.enqueue(new Callback<List<ResponseModel>>() {
            @Override
            public void onResponse(Call<List<ResponseModel>> call, Response<List<ResponseModel>> response) {
                if (response.isSuccessful()) {
                    List<ResponseModel> userList = response.body();
                    if (userList != null) {
                        for (ResponseModel resmodel : userList) {
                            String specificRole = "Production";
                            if (specificRole.equals(resmodel.getDepartment())) {
                                token = resmodel.getToken();

                                FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                                        token,
                                        "Outward Tanker Security Process Done..!",
                                        "Vehicle Number:-" + vehicleNumber + " has completed Security process at " + outTime,
                                        getApplicationContext(),
                                        Outward_Tanker_Security.this
                                );
                                notificationsSender.triggerSendNotification();
                            }
                        }
                    }
                } else {
                    Log.d("API", "Unsuccessful API response");
                }
            }

            @Override
            public void onFailure(Call<List<ResponseModel>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Tanker_Security.this, "failed..!", Toast.LENGTH_SHORT).show();
            }
        });
    }


    private void FetchVehicleDetails(String vehicleNumber, String menuType, char s, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, s, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenum.setText(out.getVehicleNumber());
                        eddate.setText(out.getDate());
                        edremark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        kl.setText(String.valueOf(out.getKl()));
                        transname.setText(out.getTransportName());
                        place.setText(out.getPlace());
                        mobilenum.setText(out.getMobileNumber());
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);
                        updatebtn.setVisibility(View.VISIBLE);
                        submit.setVisibility(View.GONE);

                    }
                }else {
                    Toasty.error(Outward_Tanker_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    private void FetchVehicleDetailsforUpdate(String vehicleNumber, String menuType, char x, char i) {
        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(vehicleNumber, menuType, x, i);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()){
                    if (response.body().size() > 0) {
                        List<Response_Outward_Security_Fetching> outlist = response.body();
                        Response_Outward_Security_Fetching out = outlist.get(0);
                        OutwardId = out.getOutwardId();
                        serialnumber.setText(out.getSerialNumber());
                        vehiclenum.setText(out.getVehicleNumber());
                        eddate.setText(out.getDate());
                        edremark.setText(out.getRemark());
                        serialnumber.setEnabled(false);
                        kl.setText(String.valueOf(out.getKl()));
                        transname.setText(out.getTransportName());
                        place.setText(out.getPlace());
                        mobilenum.setText(out.getMobileNumber());
                        edremark.setText(out.getInSecRemark());
                        intime.setVisibility(View.GONE);
//                        saveButton.setVisibility(View.GONE);
//                        button1.setVisibility(View.GONE);
//                        btnadd.setVisibility(View.GONE);

                        updatebtn.setVisibility(View.VISIBLE);
                        submit.setVisibility(View.GONE);


                    }
                }else {
                    Toasty.error(Outward_Tanker_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    private void FetchVehicleDetail(@NonNull String VehicleNo, String vehicltype, char DeptType, char InOutType) {

        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(VehicleNo, vehicltype, DeptType, InOutType);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()&& response.body()!= null ) {
                    if (response.body().size() > 0){
                        List<Response_Outward_Security_Fetching> data = response.body();
                        Response_Outward_Security_Fetching obj = data.get(0);
                        OutwardId = obj.getOutwardId();
                        serialnumber.setText(obj.getSerialNumber());
                        serialnumber.setEnabled(false);
                        vehiclenum.setText(obj.getVehicleNumber());
                        vehiclenum.setEnabled(false);
                        eddate.setText(obj.getDate());
                        eddate.setEnabled(false);
                    }
                } else {
                    Toasty.error(Outward_Tanker_Security.this, "This Vehicle Number Is Not Available..!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    public void GetMaxSerialNo(String formattedDate) {
        /*String serialNoPreFix = "GA" + formattedDate;*/
        Call<String> call = getmaxserialno.getmaxserialnumberoutward(formattedDate);
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                if (response.isSuccessful()) {
                    String maxSerialNumber = response.body();
                    autoGeneratedNumber = Integer.parseInt(maxSerialNumber.substring(10, 13)) + 1;
                    @SuppressLint("DefaultLocale") String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
                    String serialNumber = formattedDate + autoGeneratedNumberString;
                    serialnumber.setText(serialNumber);
                    serialnumber.setEnabled(true);
                } else {
                    // Handle the error
                    String serialNumber = formattedDate + "001";
                    serialnumber.setText(serialNumber);
                }
            }

            @Override
            public void onFailure(Call<String> call, Throwable t) {
                String serialNumber = formattedDate + "001";
                serialnumber.setText(serialNumber);
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                // Handle the failure

            }
        });
    }


    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }


    public void insert() {
        String etintime = intime.getText().toString().trim();
        String date = eddate.getText().toString().trim();
        String etserialnum = serialnumber.getText().toString().trim();
        if (!kl.getText().toString().isEmpty()) {
            try {
                ukl = Integer.parseInt(kl.getText().toString().trim());
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        } else {
            Toasty.warning(this, "Kl is Empty", Toast.LENGTH_SHORT).show();
        }
        String etvehiclnum = vehiclenum.getText().toString().trim();
        String ettransname = transname.getText().toString().trim();
        String etplace = place.getText().toString().trim();
        String etmobilenum = mobilenum.getText().toString().trim();
        String remark = edremark.getText().toString().trim();
        String outTime = getCurrentTime();
//        String capacity = capacityvehicle.getText().toString().trim();

        String permitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = vehfitnessyes.isChecked() ? "Yes" : "No";
        String licselection = licye.isChecked() ? "Yes" : "No";
        String rcselection = rcyes.isChecked() ? "Yes" : "No";

        if (etintime.isEmpty() || etserialnum.isEmpty() || etvehiclnum.isEmpty() || ettransname.isEmpty() ||
                etplace.isEmpty() || etmobilenum.isEmpty()) {
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        } else {
            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, etintime,
                    outTime, ukl, etplace, permitselection, pucselection, insuranceselection, vehfitnesselection, licselection, rcselection, "", "",
                    "", "", remark, "", "", "", "", "", outTime, EmployeId, false,
                    "", 'S', etserialnum, etvehiclnum, ettransname, etmobilenum, "", "",
                    date, "", "", "", 0, "", 0, "",
                    'B', inOut, vehicleType, etintime, "");

            dialogHelper.showConfirmationDialog(this, () -> {
                dialogHelper.showProgressDialog(this); // Show progress when confirmed
                Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);
                call.enqueue(new Callback<Boolean>() {
                    @Override
                    public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                        if (response.isSuccessful() && response.body() != null && response.body()) {
                            dialogHelper.hideProgressDialog(); // Hide after response
                            Notificationforall(etvehiclnum);
                            makeNotification(etvehiclnum, outTime);
                            productionnotification(etvehiclnum, outTime);
                            Toasty.success(Outward_Tanker_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                            NavigationUtil.navigateAndClear(Outward_Tanker_Security.this, com.android.gandharvms.Outward_Tanker.class);
                        }
                    }

                    @Override
                    public void onFailure(Call<Boolean> call, Throwable t) {
                        dialogHelper.hideProgressDialog(); // Hide after response
                        Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                        if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                            Response<?> response = ((HttpException) t).response();
                            if (response != null) {
                                Log.e("Retrofit", "Error Response Code: " + response.code());
                                try {
                                    Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                        Toasty.error(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                    }
                });
            });
        }
    }

    private void updateData() {
        String serial = serialnumber.getText().toString().trim();
        String uvehicle = vehiclenum.getText().toString().trim();
        String udate = eddate.getText().toString().trim();
        if(!kl.getText().toString().isEmpty())
        {
            try {
                ukl=Integer.parseInt(kl.getText().toString().trim());
            }catch (NumberFormatException e){
                e.printStackTrace();
            }
        }
        else{
            Toasty.warning(this, "Kl is Empty", Toast.LENGTH_SHORT).show();
        }
        String utransporter = transname.getText().toString().trim();
        String uplace = place.getText().toString().trim();
        String umobile = mobilenum.getText().toString().trim();
        //String ucapacity = capacityvehicle.getText().toString().trim();
        String uremark = edremark.getText().toString().trim();
        String outTime = getCurrentTime();

        String permitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = vehfitnessyes.isChecked() ? "Yes" : "No";
        String licselection = licye.isChecked() ? "Yes" : "No";
        String rcselection = rcyes.isChecked() ? "Yes" : "No";

        if (serial.isEmpty()||uvehicle.isEmpty()||udate.isEmpty()|| utransporter.isEmpty()||uplace.isEmpty()||
        umobile.isEmpty()||uremark.isEmpty()||permitselection.isEmpty()||pucselection.isEmpty()||insuranceselection.isEmpty()||
        vehfitnesselection.isEmpty()||licselection.isEmpty()||rcselection.isEmpty()){
            Toasty.warning(this,"All fields must be filled",Toast.LENGTH_SHORT,true).show();
        }else {
            Isreportingupdate_Security_model isreportingupdateSecurityModel = new Isreportingupdate_Security_model(OutwardId,"",outTime,
                    ukl,uplace,permitselection,pucselection,insuranceselection,vehfitnesselection,licselection,rcselection,"",
                    "","","",uremark,"",EmployeId,"","","",
                    "","",'S',serial,uvehicle,utransporter,umobile,"","","","","",0,
                    "",0,"",'B',inOut,vehicleType,"","");

            Call<Boolean> call = outwardTanker.updateoutwardsecurity(isreportingupdateSecurityModel);
            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() && response.body() == true){
                        makeNotification(uvehicle, outTime);
                        productionnotification(uvehicle, outTime );
                        Toasty.success(Outward_Tanker_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(Outward_Tanker_Security.this,com.android.gandharvms.Outward_Tanker.class));
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {

                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toasty.error(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                }
            });
        }
    }

    private void verifyVehicleExit(String vehicleNo, String vehicleType) {
        Call<VehicleExitResponse> call = outwardTanker.checkvehicleexits(vehicleNo,vehicleType);
        call.enqueue(new Callback<VehicleExitResponse>() {
            @Override
            public void onResponse(Call<VehicleExitResponse> call, Response<VehicleExitResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    int status = response.body().getStatus();
                    if (status == 1) {
                        //Toasty.success(Outward_Tanker_Security.this, "Vehicle Does Not In Factory", Toast.LENGTH_SHORT).show();
                    } else {
                        Toasty.warning(Outward_Tanker_Security.this, "Vehicle already exists in factory and has not completed the process flow.", Toast.LENGTH_LONG).show();
                        vehiclenum.setText("");
                    }
                } else {
                    Log.e("API_ERROR", "Unsuccessful response");
                }
            }

            @Override
            public void onFailure(Call<VehicleExitResponse> call, Throwable t) {
                Log.e("API_ERROR", "Failure: " + t.getMessage());
            }
        });
    }

    public void outwardolcgridclick(View view) {
        Intent intent = new Intent(this, Grid_Outward.class);
        startActivity(intent);
    }
}