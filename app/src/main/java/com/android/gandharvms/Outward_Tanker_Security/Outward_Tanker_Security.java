package com.android.gandharvms.Outward_Tanker_Security;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Global_Var;
import com.android.gandharvms.InwardCompletedGrid.GridCompleted;
import com.android.gandharvms.Inward_Tanker_Security.Inward_Tanker_Security;
import com.android.gandharvms.Inward_Truck;
import com.android.gandharvms.LoginWithAPI.LoginMethod;
import com.android.gandharvms.LoginWithAPI.ResponseModel;
import com.android.gandharvms.LoginWithAPI.RetroApiClient;
import com.android.gandharvms.R;
import com.google.firebase.firestore.FirebaseFirestore;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import es.dmoral.toasty.Toasty;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.HttpException;
import retrofit2.Response;

public class Outward_Tanker_Security extends AppCompatActivity {


    EditText intime, serialnumber, kl, vehiclenum, transname, place, mobilenum, edremark, eddate, capacityvehicle, reportingremark;
    Button submit;
    FirebaseFirestore dbroot;
    TimePickerDialog tpicker;
    Calendar calendar = Calendar.getInstance();
    private CheckBox isReportingCheckBox;
    private EditText reportingRemarkLayout;
    Button saveButton,dbbutton;;
    RadioButton rbvehpermityes, rbvehpermitno, rbpucyes, rbpucno, rbinsuranceyes, rbinsuranceno, vehfitnessyes, vehfitnessno, licye, licno, rcyes, rcno;
    private String vehicleType = Global_Var.getInstance().MenuType;
    private char nextProcess = Global_Var.getInstance().DeptType;
    private char inOut = Global_Var.getInstance().InOutType;
    private String EmployeName = Global_Var.getInstance().Name;
    private String EmployeId = Global_Var.getInstance().EmpId;
    private int OutwardId;
    private Outward_Tanker outwardTanker;
    DatePickerDialog picker;
    public Outward_Tanker getmaxserialno;
    SimpleDateFormat datef = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
    private int autoGeneratedNumber;
    private SharedPreferences sharedPreferences;
    Date currentDate = Calendar.getInstance().getTime();
    CheckBox cbox;
    private String token;
    private LoginMethod userDetails;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_outward_tanker_security);
        getmaxserialno = Outward_RetroApiclient.insertoutwardtankersecurity();
        outwardTanker = Outward_RetroApiclient.insertoutwardtankersecurity();
        userDetails = RetroApiClient.getLoginApi();

        isReportingCheckBox = findViewById(R.id.isreporting);
        reportingRemarkLayout = findViewById(R.id.edtreportingremark);
        saveButton = findViewById(R.id.saveButton);

        reportingRemarkLayout.setVisibility(View.GONE);
        saveButton.setVisibility(View.GONE);

        dbbutton = findViewById(R.id.samplingview);

        isReportingCheckBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                // Show the TextInputLayout and Button
                reportingRemarkLayout.setVisibility(View.VISIBLE);
                saveButton.setVisibility(View.VISIBLE);
            } else {
                // Hide the TextInputLayout and Button
                reportingRemarkLayout.setVisibility(View.GONE);
                saveButton.setVisibility(View.GONE);
            }
        });

        //        listdata button
        dbbutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Outward_Tanker_Security.this, GridCompleted.class));
            }
        });


        saveButton.setOnClickListener(v -> {
        });

        intime = findViewById(R.id.etintime);
        eddate = findViewById(R.id.etdate);
        serialnumber = findViewById(R.id.etserialnumber);
        kl = findViewById(R.id.etkl);
        vehiclenum = findViewById(R.id.etvehicleno);

        transname = findViewById(R.id.ettranseportname);
        place = findViewById(R.id.etplace);
        mobilenum = findViewById(R.id.etmobilenumber);
        edremark = findViewById(R.id.etremark);
        capacityvehicle = findViewById(R.id.etcapacityofvehicle);

        rbvehpermityes = findViewById(R.id.vehiclepermityes);
        rbvehpermitno = findViewById(R.id.vehiclepermitno);
        rbpucyes = findViewById(R.id.pucyes);
        rbpucno = findViewById(R.id.pucno);
        rbinsuranceyes = findViewById(R.id.insuranceyes);
        rbinsuranceno = findViewById(R.id.insuranceno);
        vehfitnessyes = findViewById(R.id.vehfityes);
        vehfitnessno = findViewById(R.id.vehfitno);
        licye = findViewById(R.id.drilicyes);
        licno = findViewById(R.id.drilicno);
        rcyes = findViewById(R.id.rcbook_yes);
        rcno = findViewById(R.id.rcbook_no);
        sharedPreferences = getSharedPreferences("VehicleManagementPrefs", MODE_PRIVATE);
        cbox = findViewById(R.id.isreporting);
        reportingremark = findViewById(R.id.edtreportingremark);


        submit = findViewById(R.id.etssubmit);
        dbroot = FirebaseFirestore.getInstance();

        String dateFormatPattern = "ddMMyyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatPattern, Locale.getDefault());
        String formattedDate = dateFormat.format(currentDate);
        // AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(formattedDate);
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putInt("autoGeneratedNumber", 1);
            editor.putInt("lastDay", currentDay);
            editor.apply();
        }

        if (sharedPreferences != null) {
            if (getIntent().hasExtra("VehicleNumber")) {
                FetchVehicleDetail(getIntent().getStringExtra("VehicleNumber"), Global_Var.getInstance().MenuType, 'S', 'I');
//                etreg.setText(getIntent().getStringExtra("SerialNumber"));
//                etreg.setEnabled(false);
//                etvehical.setText(getIntent().getStringExtra("VehicleNumber"));
//                etvehical.setEnabled(false);
//            repremark.setText(getIntent().getStringExtra("Remark"));
//            repremark.setEnabled(false);
//            etdate.setText(dateFormat.format(getIntent().getStringExtra("Date")));
//            etdate.setEnabled(false);
//            etnetweight.setText(getIntent().getStringExtra("NetWt"));
//            etnetweight.setEnabled(false);
//            cbox.setChecked(Boolean.parseBoolean(getIntent().getStringExtra("IsReporting")));
//            cbox.setEnabled(false);
                saveButton.setVisibility(View.GONE);
//                button1.setVisibility(View.GONE);
//                btnadd.setVisibility(View.GONE);
            } else {
                GetMaxSerialNo(formattedDate);
            }

        } else {
            Log.e("MainActivity", "SharedPreferences is null");
        }


        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                isReportingCheckBox = findViewById(R.id.isreporting);
                if (isReportingCheckBox.isChecked()) {
                    updateData();
                } else {
                    insert();
                }

            }
        });
        saveButton = findViewById(R.id.saveButton);
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                insertreporting();
            }
        });


        intime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                int hours = calendar.get(Calendar.HOUR_OF_DAY);
                int mins = calendar.get(Calendar.MINUTE);
                tpicker = new TimePickerDialog(Outward_Tanker_Security.this, new TimePickerDialog.OnTimeSetListener() {
                    @Override
                    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                        Calendar c = Calendar.getInstance();
                        c.set(Calendar.HOUR_OF_DAY, hourOfDay);
                        c.set(Calendar.MINUTE, minute);

                        // Set the formatted time to the EditText
                        intime.setText(hourOfDay + ":" + minute);
                    }
                }, hours, mins, false);
                tpicker.show();
            }
        });

        eddate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Outward_Tanker_Security.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        // etdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                        eddate.setText(datef.format(calendar.getTime()));
                    }
                }, year, month, day);
                picker.show();
            }
        });
        vehiclenum.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    FetchVehicleDetail(vehiclenum.getText().toString().trim(), vehicleType, nextProcess, inOut);
                }
            }
        });

    }

    public void makeNotification(String vehicleNumber, String outTime) {
        Call<List<ResponseModel>> call = userDetails.getUsersListData();
        call.enqueue(new Callback<List<ResponseModel>>() {
            @Override
            public void onResponse(Call<List<ResponseModel>> call, Response<List<ResponseModel>> response) {
                if (response.isSuccessful()){
                    List<ResponseModel> userList = response.body();
                    if (userList != null){
                        for (ResponseModel resmodel : userList){
                            String specificRole = "Security";
                            if (specificRole.equals(resmodel.getDepartment())) {
                                token = resmodel.getToken();

                                FcmNotificationsSender notificationsSender = new FcmNotificationsSender(
                                        token,
                                        "Outward Tanker Security Process Done..!",
                                        "Vehicle Number:-" + vehicleNumber + " has completed Security process at " + outTime,
                                        getApplicationContext(),
                                        Outward_Tanker_Security.this
                                );
                                notificationsSender.SendNotifications();
                            }
                        }
                    }
                }
                else {
                    Log.d("API", "Unsuccessful API response");
                }
            }

            @Override
            public void onFailure(Call<List<ResponseModel>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toasty.error(Outward_Tanker_Security.this, "failed..!", Toast.LENGTH_SHORT).show();
            }
        });
    }



    private void insertreporting() {
        String serial = serialnumber.getText().toString().trim();
        String vehicle = vehiclenum.getText().toString().trim();
        String date = eddate.getText().toString().trim();
//        String etintime = "";
//        int etkl= 0;
//        String ettransname = "";
//        String etplace= "";
//        String etmobilenum= "";
//        String remark= "";
//        String outTime = "";
//        String capacity= "";
        String edremark = "";
        Boolean isreporting = false;
        if (cbox.isChecked()) {
            edremark = reportingremark.getText().toString().trim();
            isreporting = true;
        }
        if (vehicle.isEmpty() || date.isEmpty()) {
            Toasty.warning(this, "All fields must be filled", Toast.LENGTH_SHORT, true).show();
        } else {
            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, "", "",
                    '0', "", "", "", "", "", "", "", "", "",
                    "", "", "", "", "", "", "", "", "", "",
                     isreporting, edremark, 'S', serial, vehicle, "", "", "", "",
                    date, "", "", "", '0', "", '0', "", 'S', inOut,
                    vehicleType, "", "");
            Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);
            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() != null && response.body() == true) {
                        Toast.makeText(Outward_Tanker_Security.this, "Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {

                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toast.makeText(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                }
            });

        }
    }

    private void FetchVehicleDetail(@NonNull String VehicleNo, String vehicltype, char DeptType, char InOutType) {

        Call<List<Response_Outward_Security_Fetching>> call = Outward_RetroApiclient.insertoutwardtankersecurity().outwardsecurityfetching(VehicleNo, vehicltype, DeptType, InOutType);
        call.enqueue(new Callback<List<Response_Outward_Security_Fetching>>() {
            @Override
            public void onResponse(Call<List<Response_Outward_Security_Fetching>> call, Response<List<Response_Outward_Security_Fetching>> response) {
                if (response.isSuccessful()&& response.body()!= null ) {
                    if (response.body().size() > 0){
                        List<Response_Outward_Security_Fetching> data = response.body();
                        Response_Outward_Security_Fetching obj = data.get(0);
                        OutwardId = obj.getOutwardId();
                        serialnumber.setText(obj.getSerialNumber());
                        serialnumber.setEnabled(false);
                        vehiclenum.setText(obj.getVehicleNumber());
                        vehiclenum.setEnabled(false);
                        eddate.setText(obj.getDate());
                        cbox.setChecked(true);
                        cbox.setEnabled(false);
                        saveButton.setVisibility(View.GONE);
                        reportingremark.setEnabled(false);
                        reportingremark.setVisibility(View.GONE);
                        intime.callOnClick();
                        eddate.setEnabled(false);
                    }
                } else {
                    Log.e("Retrofit", "Error" + response.code());
                }
            }

            @Override
            public void onFailure(Call<List<Response_Outward_Security_Fetching>> call, Throwable t) {

                Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        });
    }

    public void GetMaxSerialNo(String formattedDate) {
        /*String serialNoPreFix = "GA" + formattedDate;*/
        Call<String> call = getmaxserialno.getmaxserialnumberoutward(formattedDate);
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                if (response.isSuccessful()) {
                    String maxSerialNumber = response.body();
                    autoGeneratedNumber = Integer.parseInt(maxSerialNumber.substring(10, 13)) + 1;
                    @SuppressLint("DefaultLocale") String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
                    String serialNumber = "GA" + formattedDate + autoGeneratedNumberString;
                    serialnumber.setText(serialNumber);
                    serialnumber.setEnabled(true);
                } else {
                    // Handle the error
                    String serialNumber = "GA" + formattedDate + "001";
                    serialnumber.setText(serialNumber);
                }
            }

            @Override
            public void onFailure(Call<String> call, Throwable t) {
                String serialNumber = "GA" + formattedDate + "001";
                serialnumber.setText(serialNumber);
                Log.e("Retrofit", "Failure: " + t.getMessage());
                // Check if there's a response body in case of an HTTP error
                if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                    Response<?> response = ((HttpException) t).response();
                    if (response != null) {
                        Log.e("Retrofit", "Error Response Code: " + response.code());
                        try {
                            Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
                Toast.makeText(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                // Handle the failure

            }
        });
    }


    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }


    public void insert() {
        String etintime = intime.getText().toString().trim();
        String date = eddate.getText().toString().trim();
        String etserialnum = serialnumber.getText().toString().trim();
        int etkl = Integer.parseInt(kl.getText().toString().trim());
        String etvehiclnum = vehiclenum.getText().toString().trim();
        String ettransname = transname.getText().toString().trim();
        String etplace = place.getText().toString().trim();
        String etmobilenum = mobilenum.getText().toString().trim();
        String remark = edremark.getText().toString().trim();
        String outTime = getCurrentTime();
        String capacity = capacityvehicle.getText().toString().trim();

        String permitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = vehfitnessyes.isChecked() ? "Yes" : "No";
        String licselection = licye.isChecked() ? "Yes" : "No";
        String rcselection = rcyes.isChecked() ? "Yes" : "No";

        if (etintime.isEmpty() || etserialnum.isEmpty() || etvehiclnum.isEmpty() || ettransname.isEmpty() ||
                etplace.isEmpty() || etmobilenum.isEmpty()) {
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        } else {
//            Map<String,String> items = new HashMap<>();
//            items.put("In_Time",intime.getText().toString().trim());
//            items.put("Serial_Number",serialnumber.getText().toString().trim());
//            items.put("kl",kl.getText().toString().trim());
//            items.put("Vehicle_Number",vehiclenum.getText().toString().trim());
//            items.put("Transporter",transname.getText().toString().trim());
//            items.put("Place",place.getText().toString().trim());
//            items.put("Mobile_Number",mobilenum.getText().toString().trim());
//
//            dbroot.collection("Outward Tanker Security(In)").add(items)
//                    .addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
//                        @Override
//                        public void onComplete(@NonNull Task<DocumentReference> task) {
//                            Toast.makeText(Outward_Tanker_Security.this, "Data Inserted Successfully", Toast.LENGTH_SHORT).show();
//                        }
//                    });

//            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security('0','0',etintime,outTime,kl,etplace,
//                    )
            Request_Model_Outward_Tanker_Security requestModelOutwardTankerSecurity = new Request_Model_Outward_Tanker_Security(OutwardId, etintime,
                    outTime, etkl, etplace, permitselection, pucselection, insuranceselection, vehfitnesselection, licselection, rcselection, "", "",
                    "", "", remark, "", "", "", "", "", outTime, EmployeId,  false,
                    "", 'S', etserialnum, etvehiclnum, ettransname, etmobilenum, capacity, "",
                    date, "", "", "", 0, "", 0, "",
                    'B', inOut, vehicleType, etintime, "");


            Call<Boolean> call = outwardTanker.outwardtankerinsert(requestModelOutwardTankerSecurity);

            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() != null && response.body() == true) {
                        makeNotification(etvehiclnum, outTime);
                        Toast.makeText(Outward_Tanker_Security.this, "Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {
                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toast.makeText(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();

                }
            });


        }

    }

    private void updateData() {
        String serial = serialnumber.getText().toString().trim();
        String uvehicle = vehiclenum.getText().toString().trim();
        String udate = eddate.getText().toString().trim();
        String uintime = intime.getText().toString().trim();
        int ukl = Integer.parseInt(kl.getText().toString().trim());
        String utransporter = transname.getText().toString().trim();
        String uplace = place.getText().toString().trim();
        String umobile = mobilenum.getText().toString().trim();
        String ucapacity = capacityvehicle.getText().toString().trim();
        String uremark = edremark.getText().toString().trim();
        String outTime = getCurrentTime();

        String permitselection = rbvehpermityes.isChecked() ? "Yes" : "No";
        String pucselection = rbpucyes.isChecked() ? "Yes" : "No";
        String insuranceselection = rbinsuranceyes.isChecked() ? "Yes" : "No";
        String vehfitnesselection = vehfitnessyes.isChecked() ? "Yes" : "No";
        String licselection = licye.isChecked() ? "Yes" : "No";
        String rcselection = rcyes.isChecked() ? "Yes" : "No";

        if (serial.isEmpty()||uvehicle.isEmpty()||udate.isEmpty()||uintime.isEmpty()||utransporter.isEmpty()||uplace.isEmpty()||
        umobile.isEmpty()||ucapacity.isEmpty()||uremark.isEmpty()||permitselection.isEmpty()||pucselection.isEmpty()||insuranceselection.isEmpty()||
        vehfitnesselection.isEmpty()||licselection.isEmpty()||rcselection.isEmpty()){
            Toasty.warning(this,"All fields must be filled",Toast.LENGTH_SHORT,true).show();
        }else {
            Isreportingupdate_Security_model isreportingupdateSecurityModel = new Isreportingupdate_Security_model(OutwardId,uintime,outTime,
                    ukl,uplace,permitselection,pucselection,insuranceselection,vehfitnesselection,licselection,rcselection,"",
                    "","","",uremark,"",EmployeId,"","","",
                    "","",'S',serial,uvehicle,utransporter,umobile,ucapacity,"","","","",0,
                    "",0,"",'W',inOut,vehicleType,uintime,"");

            Call<Boolean> call = outwardTanker.updateoutwardsecurity(isreportingupdateSecurityModel);
            call.enqueue(new Callback<Boolean>() {
                @Override
                public void onResponse(Call<Boolean> call, Response<Boolean> response) {
                    if (response.isSuccessful() && response.body() && response.body() == true){
                        makeNotification(uvehicle, outTime);
                        Toasty.success(Outward_Tanker_Security.this, "Data Inserted Succesfully !", Toast.LENGTH_SHORT).show();
                        startActivity(new Intent(Outward_Tanker_Security.this, Inward_Truck.class));
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<Boolean> call, Throwable t) {

                    Log.e("Retrofit", "Failure: " + t.getMessage());
// Check if there's a response body in case of an HTTP error
                    if (call != null && call.isExecuted() && call.isCanceled() && t instanceof HttpException) {
                        Response<?> response = ((HttpException) t).response();
                        if (response != null) {
                            Log.e("Retrofit", "Error Response Code: " + response.code());
                            try {
                                Log.e("Retrofit", "Error Response Body: " + response.errorBody().string());
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    Toasty.error(Outward_Tanker_Security.this, "failed", Toast.LENGTH_SHORT).show();
                }
            });
        }
    }
    public void outwardolcgridclick(View view){
        Intent intent = new Intent(this,Grid_Outward.class);
        startActivity(intent);
    }
}