package com.android.gandharvms.Inward_Truck_Security;

import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.TimePicker;
import android.widget.Toast;

import com.android.gandharvms.FcmNotificationsSender;
import com.android.gandharvms.Inward_Truck;
import com.android.gandharvms.Menu;
import com.android.gandharvms.R;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;

public class Inward_Truck_Security extends AppCompatActivity {

    String [] items = {"Ton","Litre","KL","Kgs","pcs"};
    String [] items1 = {"Ton","Litre","KL","Kgs","pcs"};
    String [] regitems = {"Capital Register", "General Register","Inward Register"};
    AutoCompleteTextView autoCompleteTextView,regAutoCompleteTextView;
    AutoCompleteTextView autoCompleteTextView1;
    ArrayAdapter<String> adapterItems;
    ArrayAdapter<String> adapterItems1;
    RadioButton lrcopyYes,lrcopyNo,deliveryYes,deliveryNo,taxinvoiceYes,taxinvoiceNo,ewaybillYes,ewaybillNo;


    ActivityResultLauncher<String> launcher;
    EditText etintime,etserialnumber,etvehicalnumber,etsinvocieno,etsdate,etssupplier,
            etsmaterial,etsqty,etsuom,etsnetwt,etsuom2,etregister,repremark;

    Button wesubmit;
    Button view;
    FirebaseFirestore intrsdbroot;
    DatePickerDialog picker;
    TimePickerDialog tpicker;
    FirebaseStorage storage;
    ArrayAdapter<String> registeritem;
    private SharedPreferences sharedPreferences;
    private int autoGeneratedNumber;
    private final int MAX_LENGTH=10;

    private CheckBox isReportingCheckBox;
    private EditText reportingRemarkLayout;
    Button saveButton;
    CheckBox cbox;
    String DocId = "";

//    String lrCopySelection = lrcopyYes.isChecked() ? "Yes" : "No";
//    String deliverySelection = deliveryYes.isChecked() ? "Yes" : "No";
//    String taxInvoiceSelection = taxinvoiceYes.isChecked() ? "Yes" : "No";
//    String ewayBillSelection = ewaybillYes.isChecked() ? "Yes" : "No";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_inward_truck_security);

        isReportingCheckBox = findViewById(R.id.isreporting);
        reportingRemarkLayout = findViewById(R.id.edtreportingremark);
        saveButton = findViewById(R.id.saveButton);

        reportingRemarkLayout.setVisibility(View.GONE);
        saveButton.setVisibility(View.GONE);

        isReportingCheckBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                // Show the TextInputLayout and Button
                reportingRemarkLayout.setVisibility(View.VISIBLE);
                saveButton.setVisibility(View.VISIBLE);
            } else {
                // Hide the TextInputLayout and Button
                reportingRemarkLayout.setVisibility(View.GONE);
                saveButton.setVisibility(View.GONE);
            }
        });



        //Send Notification to all
        FirebaseMessaging.getInstance().subscribeToTopic("dQlMFtOqRnWEMM0zYYRJ7S:APA91bGy88WuHE94r7rbUGAiKRyRDKFbCHD1WAX0HICYSVUJEhb8_pLQPS0tDeThddTrnY_n5C3tqlobYFEpgOI0ZB5U-ob7YmfGWY40WEcOqpTCZskh-QSrzJ45DORulOLX5OT0cmE7");

        regAutoCompleteTextView = findViewById(R.id.etregister);
        registeritem = new ArrayAdapter<String>(this,R.layout.security_registerlist,regitems);
        regAutoCompleteTextView.setAdapter(registeritem);
        regAutoCompleteTextView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String items = parent.getItemAtPosition(position).toString();
                Toast.makeText(getApplicationContext(),"Item: "+items+"Selected",Toast.LENGTH_SHORT).show();
            }
        });
                                  // Uom work
        autoCompleteTextView= findViewById(R.id.etsuom);
        autoCompleteTextView1=findViewById(R.id.etsuom2);

        adapterItems = new ArrayAdapter<String>(this,R.layout.list_itemuom,items);
        adapterItems1 = new ArrayAdapter<String>(this,R.layout.in_tr_se_nwe_list,items1);

        autoCompleteTextView.setAdapter(adapterItems);
        autoCompleteTextView1.setAdapter(adapterItems1);

        // for Auto Genrated serial number
        sharedPreferences = getSharedPreferences("TruckSecurity", MODE_PRIVATE);
        autoCompleteTextView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String items = parent.getItemAtPosition(position).toString();
                Toast.makeText(getApplicationContext(), "Item"+items, Toast.LENGTH_SHORT).show();
            }
        });
        autoCompleteTextView1.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String items1 = parent.getItemAtPosition(position).toString();
                Toast.makeText(getApplicationContext(), "Item"+items1, Toast.LENGTH_SHORT).show();
            }
        });


        etintime= (EditText) findViewById(R.id.etintime);
        etserialnumber= (EditText) findViewById(R.id.etserialnumber);
        etvehicalnumber= (EditText) findViewById(R.id.etvehicalnumber);
        etsinvocieno=(EditText) findViewById(R.id.etsinvocieno);
        etsdate=(EditText) findViewById(R.id.etsdate);
        etssupplier=(EditText) findViewById(R.id.etssupplier);
        etsmaterial=(EditText) findViewById(R.id.etsmaterial);
        etsqty=(EditText) findViewById(R.id.etsqty);
        etsuom=(EditText) findViewById(R.id.etsuom);
        etsnetwt=(EditText) findViewById(R.id.etsnetwt);
        etsuom2=(EditText) findViewById(R.id.etsuom2);
        etregister=(AutoCompleteTextView)findViewById(R.id.etregister);



        repremark = (EditText) findViewById(R.id.edtreportingremark);
        cbox = (CheckBox) findViewById(R.id.isreporting);

        lrcopyYes=(RadioButton)findViewById(R.id.rb_LRCopyYes);
        lrcopyNo=(RadioButton)findViewById(R.id.rb_LRCopyNo);
        deliveryYes=(RadioButton)findViewById(R.id.rb_DeliveryYes);
        deliveryNo=(RadioButton)findViewById(R.id.rb_DeliveryNo);
        taxinvoiceYes=(RadioButton)findViewById(R.id.rb_TaxInvoiceYes);
        taxinvoiceNo=(RadioButton)findViewById(R.id.rb_TaxInvoiceNo);
        ewaybillYes=(RadioButton)findViewById(R.id.rb_EwaybillYes);
        ewaybillNo=(RadioButton)findViewById(R.id.rb_EwaybillNo);




        storage = FirebaseStorage.getInstance();


//      for imgpicker


                                                    // listing button

        view= findViewById(R.id.viewdb);
        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(Inward_Truck_Security.this,Inward_Truck_Security_viewdata.class));
            }
        });
        etsdate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final Calendar calendar = Calendar.getInstance();
                int day = calendar.get(Calendar.DAY_OF_MONTH);
                int month = calendar.get(Calendar.MONTH);
                int year = calendar.get(Calendar.YEAR);
                // Array of month abbreviations
                String[] monthAbbreviations = new String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
                picker = new DatePickerDialog(Inward_Truck_Security.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        // Use the month abbreviation from the array
                        String monthAbbreviation = monthAbbreviations[month];
                        etsdate.setText(dayOfMonth + "/" + monthAbbreviation + "/" + year);
                    }
                }, year, month, day);
                picker.show();
            }
        });
        etintime.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
             Calendar calendar = Calendar.getInstance();
             int hours = calendar.get(Calendar.HOUR_OF_DAY);
             int mins = calendar.get(Calendar.MINUTE);


             tpicker = new TimePickerDialog(Inward_Truck_Security.this, new TimePickerDialog.OnTimeSetListener() {
                 @Override
                 public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
                   Calendar c = Calendar.getInstance();
                   c.set(Calendar.HOUR_OF_DAY,hourOfDay);
                   c.set(Calendar.MINUTE,minute);
                   etintime.setText(hourOfDay +":"+ minute );
                 }
             },hours,mins,false);
             tpicker.show();
            }
        });

        etvehicalnumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }
            @Override
            public void afterTextChanged(Editable editable) {
                if (editable.length() > MAX_LENGTH) {
                    etvehicalnumber.removeTextChangedListener(this);
                    String trimmedText = editable.toString().substring(0, MAX_LENGTH);
                    etvehicalnumber.setText(trimmedText);
                    etvehicalnumber.setSelection(MAX_LENGTH); // Move cursor to the end
                    etvehicalnumber.addTextChangedListener(this);
                }else if (editable.length() < MAX_LENGTH) {
                    // Show an error message for less than 10 digits
                    etvehicalnumber.setError("Invalid format. Enter 10 Character. \n Vehicle No Format - ST00AA9999 OR YYBR9999AA");
                } else {
                    // Clear any previous error message when valid
                    etvehicalnumber.setError(null);
                }
            }
        });
        wesubmit = (Button)findViewById(R.id.wesubmit);
        intrsdbroot=FirebaseFirestore.getInstance();

        wesubmit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                isReportingCheckBox = (CheckBox) findViewById(R.id.isreporting);
                if (isReportingCheckBox.isChecked())
                {
                    updateData();
                }
                else {
                    trsedata();
                }
            }
        });

        saveButton = (Button) findViewById(R.id.saveButton);
        saveButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (DocId == ""){
                    insertreporting();
                }else {
                    Toast.makeText(Inward_Truck_Security.this, "Record Already exist", Toast.LENGTH_SHORT).show();
                }
            }
        });
        etvehicalnumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable editable) {

                if (editable.length() > MAX_LENGTH){
                    etvehicalnumber.removeTextChangedListener(this);
                    String trimmedText = editable.toString().substring(0,MAX_LENGTH);
                    etvehicalnumber.setText(trimmedText);
                    etvehicalnumber.setText(MAX_LENGTH);
                    etvehicalnumber.addTextChangedListener(this);
                } else if (editable.length()< MAX_LENGTH) {
                    etvehicalnumber.setError("Invalid format. Enter 10 Character. \n Vehicle No Format - ST00AA9999 OR YYBR9999AA");
                }else {
                    etvehicalnumber.setError(null);
                }
            }
        });
        etvehicalnumber.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus){
                    FetchVehicleDetails(etvehicalnumber.getText().toString().trim());
                }
            }
        });

//        wesubmit.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                trsedata();
////                uploadimg();
//            }
//        });

        // AUTO GENRATED SERIAL NUMBER
        int lastDay = sharedPreferences.getInt("lastDay", -1);
        int currentDay = Integer.parseInt(getDay());
        if (currentDay != lastDay) {
            // Day has changed, reset auto-generated number to 1
            SharedPreferences.Editor editor = sharedPreferences.edit();
            editor.putInt("autoGeneratedNumber", 1);
            editor.putInt("lastDay", currentDay);
            editor.apply();
    /*sharedPreferences.edit().putInt("autoGeneratedNumber", 1).apply();
    sharedPreferences.edit().putInt("lastDay", currentDay).apply();*/
        }

        if (sharedPreferences != null) {
            autoGeneratedNumber = sharedPreferences.getInt("autoGeneratedNumber", 1);
            String autoGeneratedNumberString = String.format("%03d", autoGeneratedNumber);
            // Create the serial number
            String serialNumber = "I" + GetYear() + getMonth() + getDay() + autoGeneratedNumberString;
            // Set the serial number in the EditText
            etserialnumber.setText(serialNumber);
            // Increment and store the auto-generated number for the next vehicle

        } else {
            // Handle the case where sharedPreferences is null
            // This might involve displaying an error message or taking appropriate action
            Log.e("MainActivity", "SharedPreferences is null");
        }


    }
    private String GetYear() {
        SimpleDateFormat yearFormat = new SimpleDateFormat("yy", Locale.getDefault());
        return yearToLetter(yearFormat.format(new Date()));
    }

    private String getMonth() {
        SimpleDateFormat monthFormat = new SimpleDateFormat("MM", Locale.getDefault());
        return monthToLetter(monthFormat.format(new Date()));
    }

    private String getDay() {
        SimpleDateFormat dayFormat = new SimpleDateFormat("dd", Locale.getDefault());
        return dayFormat.format(new Date());
    }

    private String monthToLetter(String month) {
        switch (month) {
            case "01":
                return "A";
            case "02":
                return "B";
            case "03":
                return "C";
            case "04":
                return "D";
            case "05":
                return "E";
            case "06":
                return "F";
            case "07":
                return "G";
            case "08":
                return "H";
            case "09":
                return "I";
            case "10":
                return "J";
            case "11":
                return "K";
            case "12":
                return "L";
            default:
                return null; // Default to January (A) if month is not recognized
        }
    }
    private String yearToLetter(String month) {
        switch (month) {
            case "23":
                return "A";
            case "24":
                return "B";
            case "25":
                return "C";
            case "26":
                return "D";
            case "28":
                return "E";
            case "29":
                return "F";
            case "30":
                return "G";
            case "31":
                return "H";
            case "32":
                return "I";
            case "33":
                return "J";
            case "34":
                return "K";
            case "35":
                return "L";
            case "36":
                return "M";
            case "37":
                return "N";
            case "38":
                return "O";
            case "39":
                return "P";
            case "40":
                return "Q";
            case "41":
                return "R";
            case "42":
                return "S";
            case "43":
                return "T";
            case "44":
                return "U";
            case "45":
                return "V";
            case "46":
                return "W";
            case "47":
                return "X";
            case "48":
                return "Y";
            case "49":
                return "Z";
            default:
                return null;
            // Default to January (A) if month is not recognized
        }
    }



    public void makeNotification(String vehicleNo,String outTime){
        FcmNotificationsSender notificationsSender = new FcmNotificationsSender("dQlMFtOqRnWEMM0zYYRJ7S:APA91bGy88WuHE94r7rbUGAiKRyRDKFbCHD1WAX0HICYSVUJEhb8_pLQPS0tDeThddTrnY_n5C3tqlobYFEpgOI0ZB5U-ob7YmfGWY40WEcOqpTCZskh-QSrzJ45DORulOLX5OT0cmE7",
                "Inward Truck Security Process Done..!",
                "Vehicle Number:-" + vehicleNo + " has Completed Security Process at " + outTime,
                getApplicationContext(), Inward_Truck_Security.this);
        notificationsSender.SendNotifications();
    }
    public void trsedata(){

        String register = etregister.getText().toString().trim();
        String intime =  etintime.getText().toString().trim();
        String serialnumber = etserialnumber.getText().toString().trim();
        String vehicalnumber = etvehicalnumber.getText().toString().trim();
        String invoiceno =  etsinvocieno.getText().toString().trim();
        String date = etsdate.getText().toString().trim();
        String supplier = etssupplier.getText().toString().trim();
        String material = etsmaterial.getText().toString().trim();
        String qty = etsqty.getText().toString().trim();
        String uom = etsuom.getText().toString().trim();
        String netwt = etsnetwt.getText().toString().trim();
        String uom2 = etsuom2.getText().toString().trim();
        String outTime = getCurrentTime();
        String lrCopySelection = lrcopyYes.isChecked() ? "Yes" : "No";
        String deliverySelection = deliveryYes.isChecked() ? "Yes" : "No";
        String taxInvoiceSelection = taxinvoiceYes.isChecked() ? "Yes" : "No";
        String ewayBillSelection = ewaybillYes.isChecked() ? "Yes" : "No";

        if (intime.isEmpty()|| serialnumber.isEmpty()|| vehicalnumber.isEmpty()|| invoiceno.isEmpty()|| date.isEmpty()|| supplier.isEmpty()|| material.isEmpty()
           || qty.isEmpty()|| uom.isEmpty()|| netwt.isEmpty()|| uom2.isEmpty()||register.isEmpty()){
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        }
        else {

            Map<String,String> trseitems = new HashMap<>();
            trseitems.put("Intime",etintime.getText().toString().trim());
            trseitems.put("serialnumber",etserialnumber.getText().toString().trim());
            trseitems.put("VehicalNumber",etvehicalnumber.getText().toString().trim());
            trseitems.put("invoicenumber",etsinvocieno.getText().toString().trim());
            trseitems.put("date",etsdate.getText().toString().trim());
            trseitems.put("Supplier",etssupplier.getText().toString().trim());
            trseitems.put("Material",etsmaterial.getText().toString().trim());
            trseitems.put("Qty",etsqty.getText().toString().trim());
            trseitems.put("UOM",etsuom.getText().toString().trim());
            trseitems.put("etsnetweight",etsnetwt.getText().toString().trim());
            trseitems.put("UOM2",etsuom2.getText().toString().trim());
            if (cbox.isChecked())
            {
                trseitems.put("outTime","");
            }
            else {
                trseitems.put("outTime",outTime);
            }
            trseitems.put("SelectRegister",etregister.getText().toString().trim());
            trseitems.put("lrcopy",lrCopySelection);
            trseitems.put("deliverybill",deliverySelection);
            trseitems.put("taxinvoice",taxInvoiceSelection);
            trseitems.put("ewaybill",ewayBillSelection);

            String rpremark = "";
            int isreporting = 0;

            if (cbox.isChecked()){
                rpremark= repremark.getText().toString().trim();
                isreporting =1;
            }
            trseitems.put("Is_Reporting",String.valueOf(isreporting));
            trseitems.put("Reporting_Remark",rpremark);

            makeNotification(etvehicalnumber.getText().toString(),outTime.toString());
            intrsdbroot.collection("Inward Truck Security").add(trseitems)
                    .addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
                        @Override
                        public void onComplete(@NonNull Task<DocumentReference> task) {
                            etintime.setText("");
                            etserialnumber.setText("");
                            etvehicalnumber.setText("");
                            etsinvocieno.setText("");
                            etsdate.setText("");
                            etssupplier.setText("");
                            etsmaterial.setText("");
                            etsqty.setText("");
                            etsuom.setText("");
                            etsnetwt.setText("");
                            etsuom2.setText("");
                            etregister.setText("");

                            Toast.makeText(Inward_Truck_Security.this, "Data Inserted Successfully", Toast.LENGTH_SHORT).show();


                        }
                    });

            Intent intent= new Intent(this, Inward_Truck.class);
            startActivity(intent);

            // Auto Genrated serial number
            sharedPreferences.edit().putInt("autoGeneratedNumber", autoGeneratedNumber + 1).apply();
        }

    }

    public void insertreporting(){
        String register = "";
        String intime =  "";
        String serialnumber = etserialnumber.getText().toString().trim();
        String vehicalnumber = etvehicalnumber.getText().toString().trim();
        String date = etsdate.getText().toString().trim();
        String invoiceno =  "";
        String supplier = "";
        String material = "";
        String qty = "";
        String uom = "";
        String netwt = "";
        String uom2 = "";
        String outTime = "";



        if (vehicalnumber.isEmpty() || date.isEmpty()){
            Toast.makeText(this, "All fields must be filled", Toast.LENGTH_SHORT).show();
        }else {
            Map<String,String> trseitems = new HashMap<>();

            trseitems.put("date",etsdate.getText().toString().trim());
            trseitems.put("serialnumber",etserialnumber.getText().toString().trim());
            trseitems.put("VehicalNumber",etvehicalnumber.getText().toString().trim());
            String rpremark = "";
            int isreporting = 0;
            if (cbox.isChecked()){
                rpremark=repremark.getText().toString().trim();
                isreporting = 1;
            }
            trseitems.put("IS_Reporting",String.valueOf(isreporting));
            trseitems.put("Reporting_Remark",rpremark);
            trseitems.put("Intime",etintime.getText().toString().trim());
            trseitems.put("invoicenumber",etsinvocieno.getText().toString().trim());
            trseitems.put("Supplier",etssupplier.getText().toString().trim());
            trseitems.put("Material",etsmaterial.getText().toString().trim());
            trseitems.put("Qty",etsqty.getText().toString().trim());
            trseitems.put("UOM",etsuom.getText().toString().trim());
            trseitems.put("etsnetweight",etsnetwt.getText().toString().trim());
            trseitems.put("UOM2",etsuom2.getText().toString().trim());
            trseitems.put("lrcopy","");
            trseitems.put("delivery","");
            trseitems.put("taxinvoice","");
            trseitems.put("ewaybill","");



            intrsdbroot.collection("Inward Truck Security").add(trseitems)
                    .addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
                        @Override
                        public void onComplete(@NonNull Task<DocumentReference> task) {
                            etintime.setText("");
                            etserialnumber.setText("");
                            etvehicalnumber.setText("");
                            etsinvocieno.setText("");
                            etsdate.setText("");
                            etssupplier.setText("");
                            etsmaterial.setText("");
                            etsqty.setText("");
                            etsuom.setText("");
                            etsnetwt.setText("");
                            etsuom2.setText("");
                        }
                    });
        }
    }

    public void FetchVehicleDetails(@NonNull String VehicleNo){
        CollectionReference collectionReference = FirebaseFirestore.getInstance().collection("Inward Truck Security");
        String searchText = VehicleNo.toString().trim();
        CollectionReference collectionReference1 = FirebaseFirestore.getInstance().collection("Inward Truck Security");
        Query query = collectionReference.whereEqualTo("VehicalNumber",searchText);
        query.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
            @Override
            public void onComplete(@NonNull Task<QuerySnapshot> task) {
                if (task.isSuccessful()){
                    int totalcount =  task.getResult().size();
                    for (QueryDocumentSnapshot documentSnapshot :task.getResult()){
                        In_Truck_security_list obj = documentSnapshot.toObject(In_Truck_security_list.class);
                        if (totalcount > 0){
                            etserialnumber.setText(obj.getSerialnumber());
                            etvehicalnumber.setText(obj.getVehicalNumber());
                            repremark.setText(obj.getReporting_Remark());
                            etsdate.setText(obj.getDate());
                            etsnetwt.setText(obj.getEtsnetweight());
                            cbox.setChecked(true);
                            cbox.setEnabled(false);
                            saveButton.setVisibility(View.GONE);
                            repremark.setEnabled(false);
                            etregister.setEnabled(false);
                            DocId = documentSnapshot.getId();
                        }

                    }
                }else {
                    Log.w("FirestoreData", "Error getting documents.", task.getException());
                }
            }
        });
    }


    public void updateData(){
        String lrCopySelection = lrcopyYes.isChecked() ? "Yes" : "No";
        String deliverySelection = deliveryYes.isChecked() ? "Yes" : "No";
        String taxInvoiceSelection = taxinvoiceYes.isChecked() ? "Yes" : "No";
        String ewayBillSelection = ewaybillYes.isChecked() ? "Yes" : "No";

        if (DocId != ""){
            Map<String, Object> updates = new HashMap<>();
            updates.put("Intime",etintime.getText().toString().trim());
            updates.put("invoicenumber",etsinvocieno.getText().toString().trim());
            updates.put("lrcopy",lrCopySelection.toString());
            updates.put("delivery",deliverySelection.toString());
            updates.put("taxinvoice",taxInvoiceSelection.toString());
            updates.put("ewaybill",ewayBillSelection.toString());
            updates.put("SelectRegister",etregister.getText().toString().trim());
            updates.put("Supplier",etssupplier.getText().toString().trim());
            updates.put("Material",etsmaterial.getText().toString().trim());
            updates.put("Qty",etsqty.getText().toString().trim());
            updates.put("UOM",etsuom.getText().toString().trim());
            updates.put("UOM2",etsuom2.getText().toString().trim());


            DocumentReference documentReference = intrsdbroot.collection("Inward Truck Security").document(DocId);
            documentReference.update(updates)
                    .addOnSuccessListener(new OnSuccessListener<Void>() {
                        @Override
                        public void onSuccess(Void unused) {
                            etsdate.setText("");
                            etserialnumber.setText("");
                            etvehicalnumber.setText("");
                            etintime.setText("");
                            etsinvocieno.setText("");
                            etregister.setText("");
                            etssupplier.setText("");
                            etsmaterial.setText("");
                            etsqty.setText("");
                            etsuom.setText("");
                            etsnetwt.setText("");
                            etsuom2.setText("");
                            Toast.makeText(Inward_Truck_Security.this, "Data Updated Successfully", Toast.LENGTH_SHORT).show();
                        }
                    })
                    .addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(Inward_Truck_Security.this, "Failed to update data", Toast.LENGTH_SHORT).show();
                        }
                    });

        }
        else {
            Toast.makeText(this, "Please Provide Vehicle no", Toast.LENGTH_SHORT).show();
        }
    }

    private String getCurrentTime() {
        // Get the current time
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm", Locale.getDefault());
        return sdf.format(new Date());
    }
    public void onBackPressed(){
        Intent intent = new Intent(this, Menu.class);
        startActivity(intent);
        finish();
    }

}